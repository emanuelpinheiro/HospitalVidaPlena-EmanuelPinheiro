// <auto-generated />
using System;
using Hospisim.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalVidaPlena_EmanuelPinheiro.Migrations
{
    [DbContext(typeof(HospisimContext))]
    [Migration("20250613020103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CondicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instrucoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternacaoId")
                        .IsUnique();

                    b.ToTable("AltasHospitalares");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000001"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000002"),
                            CondicaoPaciente = "Em acompanhamento",
                            Data = new DateTime(2024, 4, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000003"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 4, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000004"),
                            CondicaoPaciente = "Em acompanhamento",
                            Data = new DateTime(2024, 4, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000005"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000006"),
                            CondicaoPaciente = "Em acompanhamento",
                            Data = new DateTime(2024, 4, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000007"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 4, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000008"),
                            CondicaoPaciente = "Em acompanhamento",
                            Data = new DateTime(2024, 4, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000009"),
                            CondicaoPaciente = "Recuperado",
                            Data = new DateTime(2024, 4, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000010"),
                            CondicaoPaciente = "Em acompanhamento",
                            Data = new DateTime(2024, 4, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instrucoes = "Retornar em 7 dias para reavaliação.",
                            InternacaoId = new Guid("80000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProntuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000001"),
                            DataHora = new DateTime(2024, 4, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 1",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000001"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000001"),
                            Status = "Realizado",
                            Tipo = "Emergência"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000002"),
                            DataHora = new DateTime(2024, 4, 2, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 2",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000002"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000002"),
                            Status = "Em andamento",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000003"),
                            DataHora = new DateTime(2024, 4, 3, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 3",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000003"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000003"),
                            Status = "Realizado",
                            Tipo = "Internação"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000004"),
                            DataHora = new DateTime(2024, 4, 4, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 4",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000004"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000004"),
                            Status = "Em andamento",
                            Tipo = "Emergência"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000005"),
                            DataHora = new DateTime(2024, 4, 5, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 5",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000005"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000005"),
                            Status = "Realizado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000006"),
                            DataHora = new DateTime(2024, 4, 6, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 6",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000006"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000006"),
                            Status = "Em andamento",
                            Tipo = "Internação"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000007"),
                            DataHora = new DateTime(2024, 4, 7, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 7",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000007"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000007"),
                            Status = "Realizado",
                            Tipo = "Emergência"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000008"),
                            DataHora = new DateTime(2024, 4, 8, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 8",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000008"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000008"),
                            Status = "Em andamento",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000009"),
                            DataHora = new DateTime(2024, 4, 9, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 9",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000009"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000009"),
                            Status = "Realizado",
                            Tipo = "Internação"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000010"),
                            DataHora = new DateTime(2024, 4, 10, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Sala 10",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-00000000000a"),
                            ProntuarioId = new Guid("40000000-0000-0000-0000-000000000010"),
                            Status = "Em andamento",
                            Tipo = "Emergência"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Nome = "Ortopedia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Nome = "Neurologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Nome = "Ginecologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Nome = "Oncologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            Nome = "Psiquiatria"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            Nome = "Endocrinologia"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-00000000000a"),
                            Nome = "Urologia"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("Exames");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000001"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000001"),
                            DataRealizacao = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro da normalidade",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000002"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000002"),
                            DataRealizacao = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alteração detectada",
                            Tipo = "Raio-X"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000003"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000003"),
                            DataRealizacao = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro da normalidade",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000004"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000004"),
                            DataRealizacao = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alteração detectada",
                            Tipo = "Raio-X"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000005"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000005"),
                            DataRealizacao = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro da normalidade",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000006"),
                            DataRealizacao = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alteração detectada",
                            Tipo = "Raio-X"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000007"),
                            DataRealizacao = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro da normalidade",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000008"),
                            DataRealizacao = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alteração detectada",
                            Tipo = "Raio-X"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000009"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000009"),
                            DataRealizacao = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Dentro da normalidade",
                            Tipo = "Hemograma"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000010"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000010"),
                            DataRealizacao = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Alteração detectada",
                            Tipo = "Raio-X"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<string>("Leito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivoInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesClinicas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanoSaudeUtilizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrevisaoAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quarto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.HasIndex("PacienteId");

                    b.ToTable("Internacoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000001"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000001"),
                            DataEntrada = new DateTime(2024, 4, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L1",
                            MotivoInternacao = "Pós-operatório",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000001"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 4, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q1",
                            Setor = "Clínica Geral",
                            StatusInternacao = "Ativa"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000002"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000002"),
                            DataEntrada = new DateTime(2024, 4, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L2",
                            MotivoInternacao = "Infecção",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000002"),
                            PrevisaoAlta = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q2",
                            Setor = "UTI",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000003"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000003"),
                            DataEntrada = new DateTime(2024, 4, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L3",
                            MotivoInternacao = "Pós-operatório",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000003"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 4, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q3",
                            Setor = "Clínica Geral",
                            StatusInternacao = "Ativa"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000004"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000004"),
                            DataEntrada = new DateTime(2024, 4, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L4",
                            MotivoInternacao = "Infecção",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000004"),
                            PrevisaoAlta = new DateTime(2024, 4, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q4",
                            Setor = "UTI",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000005"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000005"),
                            DataEntrada = new DateTime(2024, 4, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L5",
                            MotivoInternacao = "Pós-operatório",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000005"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 4, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q5",
                            Setor = "Clínica Geral",
                            StatusInternacao = "Ativa"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000006"),
                            DataEntrada = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L6",
                            MotivoInternacao = "Infecção",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000006"),
                            PrevisaoAlta = new DateTime(2024, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q6",
                            Setor = "UTI",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000007"),
                            DataEntrada = new DateTime(2024, 4, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L7",
                            MotivoInternacao = "Pós-operatório",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000007"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 4, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q7",
                            Setor = "Clínica Geral",
                            StatusInternacao = "Ativa"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000008"),
                            DataEntrada = new DateTime(2024, 4, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L8",
                            MotivoInternacao = "Infecção",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000008"),
                            PrevisaoAlta = new DateTime(2024, 4, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q8",
                            Setor = "UTI",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000009"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000009"),
                            DataEntrada = new DateTime(2024, 4, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L9",
                            MotivoInternacao = "Pós-operatório",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000009"),
                            PlanoSaudeUtilizado = "Unimed",
                            PrevisaoAlta = new DateTime(2024, 4, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q9",
                            Setor = "Clínica Geral",
                            StatusInternacao = "Ativa"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000010"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000010"),
                            DataEntrada = new DateTime(2024, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Leito = "L10",
                            MotivoInternacao = "Infecção",
                            ObservacoesClinicas = "Paciente estável, monitoramento contínuo.",
                            PacienteId = new Guid("30000000-0000-0000-0000-00000000000a"),
                            PrevisaoAlta = new DateTime(2024, 4, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "Q10",
                            Setor = "UTI",
                            StatusInternacao = "Alta concedida"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCartaoSUS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PossuiPlanoSaude")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoSanguineo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CPF = "98765432101",
                            DataNascimento = new DateTime(1985, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.oliveira@email.com",
                            EnderecoCompleto = "Rua das Flores, 123",
                            EstadoCivil = "Casada",
                            NomeCompleto = "Maria Oliveira",
                            NumeroCartaoSUS = "12345678901",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "11988880001",
                            TipoSanguineo = "A+"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CPF = "98765432102",
                            DataNascimento = new DateTime(1978, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jose.santos@email.com",
                            EnderecoCompleto = "Av. Brasil, 456",
                            EstadoCivil = "Solteiro",
                            NomeCompleto = "José Santos",
                            NumeroCartaoSUS = "12345678902",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "11988880002",
                            TipoSanguineo = "O-"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CPF = "98765432103",
                            DataNascimento = new DateTime(1992, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carla.souza@email.com",
                            EnderecoCompleto = "Rua Verde, 789",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Carla Souza",
                            NumeroCartaoSUS = "12345678903",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "11988880003",
                            TipoSanguineo = "B+"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            CPF = "98765432104",
                            DataNascimento = new DateTime(1980, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paulo.lima@email.com",
                            EnderecoCompleto = "Rua Azul, 321",
                            EstadoCivil = "Divorciado",
                            NomeCompleto = "Paulo Lima",
                            NumeroCartaoSUS = "12345678904",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "11988880004",
                            TipoSanguineo = "AB-"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            CPF = "98765432105",
                            DataNascimento = new DateTime(1995, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fernanda.costa@email.com",
                            EnderecoCompleto = "Av. Central, 654",
                            EstadoCivil = "Casada",
                            NomeCompleto = "Fernanda Costa",
                            NumeroCartaoSUS = "12345678905",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "11988880005",
                            TipoSanguineo = "O+"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            CPF = "98765432106",
                            DataNascimento = new DateTime(1988, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.martins@email.com",
                            EnderecoCompleto = "Rua Amarela, 987",
                            EstadoCivil = "Solteiro",
                            NomeCompleto = "Lucas Martins",
                            NumeroCartaoSUS = "12345678906",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "11988880006",
                            TipoSanguineo = "A-"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            CPF = "98765432107",
                            DataNascimento = new DateTime(1975, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patricia.mendes@email.com",
                            EnderecoCompleto = "Rua das Palmeiras, 159",
                            EstadoCivil = "Viúva",
                            NomeCompleto = "Patrícia Mendes",
                            NumeroCartaoSUS = "12345678907",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "11988880007",
                            TipoSanguineo = "B-"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            CPF = "98765432108",
                            DataNascimento = new DateTime(1990, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ricardo.alves@email.com",
                            EnderecoCompleto = "Av. Paulista, 753",
                            EstadoCivil = "Casado",
                            NomeCompleto = "Ricardo Alves",
                            NumeroCartaoSUS = "12345678908",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "11988880008",
                            TipoSanguineo = "AB+"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            CPF = "98765432109",
                            DataNascimento = new DateTime(1982, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juliana.rocha@email.com",
                            EnderecoCompleto = "Rua do Sol, 852",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Juliana Rocha",
                            NumeroCartaoSUS = "12345678909",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "11988880009",
                            TipoSanguineo = "A+"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-00000000000a"),
                            CPF = "98765432110",
                            DataNascimento = new DateTime(1970, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andre.barbosa@email.com",
                            EnderecoCompleto = "Rua das Acácias, 951",
                            EstadoCivil = "Casado",
                            NomeCompleto = "André Barbosa",
                            NumeroCartaoSUS = "12345678910",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "11988880010",
                            TipoSanguineo = "O-"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReacoesAdversas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusPrescricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViaAdministracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000001"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000001"),
                            DataFim = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "500mg",
                            Frequencia = "8/8h",
                            Medicamento = "Dipirona",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000001"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000002"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000002"),
                            DataFim = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "875mg",
                            Frequencia = "12/12h",
                            Medicamento = "Amoxicilina",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000002"),
                            ReacoesAdversas = "Nenhuma",
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Intravenosa"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000003"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000003"),
                            DataFim = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "750mg",
                            Frequencia = "6/6h",
                            Medicamento = "Paracetamol",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000003"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000004"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000004"),
                            DataFim = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "400mg",
                            Frequencia = "8/8h",
                            Medicamento = "Ibuprofeno",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000004"),
                            ReacoesAdversas = "Nenhuma",
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000005"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000005"),
                            DataFim = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "500mg",
                            Frequencia = "6/6h",
                            Medicamento = "Cefalexina",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000005"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000006"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000006"),
                            DataFim = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "500mg",
                            Frequencia = "24/24h",
                            Medicamento = "Azitromicina",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000006"),
                            ReacoesAdversas = "Nenhuma",
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000007"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000007"),
                            DataFim = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "850mg",
                            Frequencia = "12/12h",
                            Medicamento = "Metformina",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000007"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000008"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000008"),
                            DataFim = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "50mg",
                            Frequencia = "24/24h",
                            Medicamento = "Losartana",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000008"),
                            ReacoesAdversas = "Nenhuma",
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000009"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000009"),
                            DataFim = new DateTime(2024, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "10mg",
                            Frequencia = "12/12h",
                            Medicamento = "Enalapril",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-000000000009"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000010"),
                            AtendimentoId = new Guid("50000000-0000-0000-0000-000000000010"),
                            DataFim = new DateTime(2024, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "20mg",
                            Frequencia = "24/24h",
                            Medicamento = "Omeprazol",
                            Observacoes = "Administrar conforme prescrição médica.",
                            ProfissionalId = new Guid("20000000-0000-0000-0000-00000000000a"),
                            ReacoesAdversas = "Nenhuma",
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Profissional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargaHorariaSemanal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Profissionais");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ativo = true,
                            CPF = "12345678901",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2015, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.silva@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000001"),
                            NomeCompleto = "Dr. Carlos Silva",
                            RegistroConselho = "CRM12345",
                            Telefone = "11999990001",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Ativo = true,
                            CPF = "12345678902",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2017, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.souza@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000002"),
                            NomeCompleto = "Dra. Ana Souza",
                            RegistroConselho = "CRM23456",
                            Telefone = "11999990002",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Ativo = true,
                            CPF = "12345678903",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2018, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.pereira@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000003"),
                            NomeCompleto = "Dr. João Pereira",
                            RegistroConselho = "CRM34567",
                            Telefone = "11999990003",
                            TipoRegistro = "CRM",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            Ativo = true,
                            CPF = "12345678904",
                            CargaHorariaSemanal = 30,
                            DataAdmissao = new DateTime(2016, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beatriz.lima@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000004"),
                            NomeCompleto = "Dra. Beatriz Lima",
                            RegistroConselho = "CRM45678",
                            Telefone = "11999990004",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            Ativo = true,
                            CPF = "12345678905",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pedro.ramos@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000005"),
                            NomeCompleto = "Dr. Pedro Ramos",
                            RegistroConselho = "CRM56789",
                            Telefone = "11999990005",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            Ativo = true,
                            CPF = "12345678906",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marina.castro@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000006"),
                            NomeCompleto = "Dra. Marina Castro",
                            RegistroConselho = "CRM67890",
                            Telefone = "11999990006",
                            TipoRegistro = "CRM",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            Ativo = true,
                            CPF = "12345678907",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2014, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.alves@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000007"),
                            NomeCompleto = "Dr. Lucas Alves",
                            RegistroConselho = "CRM78901",
                            Telefone = "11999990007",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000008"),
                            Ativo = true,
                            CPF = "12345678908",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2013, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paula.mendes@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000008"),
                            NomeCompleto = "Dra. Paula Mendes",
                            RegistroConselho = "CRM89012",
                            Telefone = "11999990008",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000009"),
                            Ativo = true,
                            CPF = "12345678909",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2012, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rafael.costa@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-000000000009"),
                            NomeCompleto = "Dr. Rafael Costa",
                            RegistroConselho = "CRM90123",
                            Telefone = "11999990009",
                            TipoRegistro = "CRM",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-00000000000a"),
                            Ativo = true,
                            CPF = "12345678910",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2021, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fernanda.dias@hospital.com",
                            EspecialidadeId = new Guid("10000000-0000-0000-0000-00000000000a"),
                            NomeCompleto = "Dra. Fernanda Dias",
                            RegistroConselho = "CRM01234",
                            Telefone = "11999990010",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesGerais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Prontuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            DataAbertura = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-001",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            DataAbertura = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-002",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            DataAbertura = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-003",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000004"),
                            DataAbertura = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-004",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000005"),
                            DataAbertura = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-005",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000006"),
                            DataAbertura = new DateTime(2023, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-006",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000007"),
                            DataAbertura = new DateTime(2023, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-007",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000008"),
                            DataAbertura = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-008",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000009"),
                            DataAbertura = new DateTime(2023, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-009",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000010"),
                            DataAbertura = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Numero = "PRNT-2023-010",
                            ObservacoesGerais = "Paciente apresenta histórico de consultas regulares. Prontuário aberto em 2023.",
                            PacienteId = new Guid("30000000-0000-0000-0000-00000000000a")
                        });
                });

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.HasOne("Hospisim.Models.Internacao", "Internacao")
                        .WithOne("AltaHospitalar")
                        .HasForeignKey("Hospisim.Models.AltaHospitalar", "InternacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internacao");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.HasOne("Hospisim.Models.Profissional", "Profissional")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.Prontuario", "Prontuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProntuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profissional");

                    b.Navigation("Prontuario");
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Exames")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithOne("Internacao")
                        .HasForeignKey("Hospisim.Models.Internacao", "AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Internacoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Prescricoes")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.Profissional", "Profissional")
                        .WithMany("Prescricoes")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Hospisim.Models.Profissional", b =>
                {
                    b.HasOne("Hospisim.Models.Especialidade", "Especialidade")
                        .WithMany("Profissionais")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Prontuarios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Internacao")
                        .IsRequired();

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Navigation("AltaHospitalar")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Navigation("Internacoes");

                    b.Navigation("Prontuarios");
                });

            modelBuilder.Entity("Hospisim.Models.Profissional", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
